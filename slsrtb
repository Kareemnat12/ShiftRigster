// Code your testbench here
// or browse Examples

module slsr_tb 
  ();
  bit  sl,sr, reset,  clk, din;
    bit [7:0] Q ;
  
  
  slsr dut(
    .sl(sl),
    .sr(sr),
    .reset(reset),
    .clk(clk),
    .din(din),
    .Q(Q));
  
  //clock genration 
  initial begin
        clk = 0;
        forever #10 clk = ~clk;  // Toggle clock every 10 ns
    end
	
    // stimulas 
  initial begin 
    reset =1;
    sl =0;
    sr=0;
    din =0;
	#11; 
     reset =0 ;
    #10;
    reset = 1; 
    #10;
    
    
  
///////////////////RESET IS HIGH //////////////////  
  reset = 1; 
    #10;

  sl = 1;
	sr = 0 ;
	din =1;
	#15;
  
  
  
  
  
  
 ///////////////////////////////////////////// 
  
  // SECOND secnario : RESET is LOW	 
	 reset = 0 ;
	 #10;
  
	sl = 1;
	sr = 0 ;
	din =1;
	#15;
	
	sl = 1;
	sr = 0 ;
	din =0;
	#15;
	
	sl = 1;
	sr = 0 ;
	din =1;
	#15;
	
	sl = 1;
	sr = 0 ;
	din =0;
	#15;
   
   reset = 1; 
    #10;
   
	sl = 0;
	sr = 1 ;
	din =1;
	#15;
	
	reset = 0; 
    #10;
	sl = 0;
	sr = 1 ;
	din =0;
	#15;
     
	sl = 1;
	sr = 0 ;
	din =1;
	#15;
	
///////////////////borders situation /////////////////////////////////////
	 
	 
	
   

	 
	 
	 sr =1;
	 sl =1;
	 din =1;
	 #5;
	 sr =0;
	 sl =0;
	 din =1;
	 #5;
	 
	 reset =1;
	 #10;
	 
	 
	 sr =1;
	 sl =1;
	 din =1;
	 #5;
	 sr =0;
	 sl =0;
	 din =1;
	 #5;
	 
	 
	 #50;
	 
	 
	 
  $finish;
  end 
   

/////

//////


   
// Monitor output
    initial begin 
        $monitor("At time %0t: Q = %b, din = %b, sl = %b, sr = %b, reset = %b", 
                 $time, Q, din, sl, sr, reset);
    end
  
   initial begin
        $dumpfile("dump.vcd");  
        $dumpvars(0,slsr_tb);      
    end

    endmodule 



///////////////////////////////////

 

